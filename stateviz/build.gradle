import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.stateviz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
java.sourceCompatibility = JavaVersion.VERSION_17

bootJar {
    archiveFileName = 'stateviz.jar'
    launchScript()
}

repositories {
    mavenCentral()
}

application {
    mainClass.set('com.stateviz.StatevizApplication')
}

dependencies {
    implementation project(':statelang')

    compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'

	testCompileOnly 'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.6.3'

    implementation 'com.google.guava:guava:31.1-jre'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.23.1'
}

def npmCmd = Os.isFamily(Os.FAMILY_WINDOWS)
    ? 'npm.cmd'
    : 'npm'

task buildFrontend(type: Exec) {
    workingDir './src/main/frontend'
    commandLine npmCmd, 'run', 'build'
}

task buildElectronInstaller(type: Exec) {
    workingDir './src/main/electron'
    commandLine npmCmd, 'run', 'build'
}

task copyJarToElectron(type: Copy) {
    from './build/libs'
    into './src/main/electron'
    include '*.jar'
}

task buildElectron(type: Copy) {
    dependsOn ordered('buildFrontend', 'bootJar', 'copyJarToElectron', 'buildElectronInstaller')
}

bootRun {
  args = ["--spring.profiles.active=dev"]
}

tasks.named('test') {
    useJUnitPlatform()
}

def ordered(String... dependencyPaths) {
    def dependencies = dependencyPaths.collect { tasks.getByPath(it) }
    for (int i = 0; i < dependencies.size() - 1; i++) {
        dependencies[i + 1].mustRunAfter(dependencies[i])
    }
    return dependencies
}
